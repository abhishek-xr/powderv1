{"ast":null,"code":"const API_BASE = \"http://127.0.0.1:8000/api\"; // Ensure this matches your backend URL\n\nexport const uploadFile = async file => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const response = await fetch(`${API_BASE}/upload`, {\n    method: \"POST\",\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to upload file\");\n  }\n  return response.json();\n};\nexport const parseFile = async fileId => {\n  const response = await fetch(`${API_BASE}/parse/${fileId}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to parse file\");\n  }\n  return response.json(); // { file_id, parsed_text }\n};\nexport const getAnalysis = async fileId => {\n  const response = await fetch(`${API_BASE}/analysis/${fileId}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to get analysis\");\n  }\n  return response.json(); // { file_id, filename, text_summary }\n};\nexport const getDocument = async fileId => {\n  const response = await fetch(`${API_BASE}/document/${fileId}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch document\");\n  }\n  return response.json(); // { file_id, filename, filepath, parsed_text }\n};","map":{"version":3,"names":["API_BASE","uploadFile","file","formData","FormData","append","response","fetch","method","body","ok","Error","json","parseFile","fileId","getAnalysis","getDocument"],"sources":["/Users/elliot/Desktop/amazon assessment/powder/portfolio-api/venv/frontend/src/api.js"],"sourcesContent":["const API_BASE = \"http://127.0.0.1:8000/api\"; // Ensure this matches your backend URL\n\nexport const uploadFile = async (file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  const response = await fetch(`${API_BASE}/upload`, {\n    method: \"POST\",\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to upload file\");\n  }\n\n  return response.json();\n};\n\nexport const parseFile = async (fileId) => {\n  const response = await fetch(`${API_BASE}/parse/${fileId}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to parse file\");\n  }\n  return response.json(); // { file_id, parsed_text }\n};\n\nexport const getAnalysis = async (fileId) => {\n  const response = await fetch(`${API_BASE}/analysis/${fileId}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to get analysis\");\n  }\n  return response.json(); // { file_id, filename, text_summary }\n};\n\nexport const getDocument = async (fileId) => {\n  const response = await fetch(`${API_BASE}/document/${fileId}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch document\");\n  }\n  return response.json(); // { file_id, filename, filepath, parsed_text }\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B,CAAC,CAAC;;AAE9C,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACxC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,SAAS,EAAE;IACjDQ,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN;EACR,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAOC,MAAM,IAAK;EACzC,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,UAAUc,MAAM,EAAE,CAAC;EAC3D,IAAI,CAACR,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACzC;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG,MAAOD,MAAM,IAAK;EAC3C,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,aAAac,MAAM,EAAE,CAAC;EAC9D,IAAI,CAACR,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMI,WAAW,GAAG,MAAOF,MAAM,IAAK;EAC3C,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,aAAac,MAAM,EAAE,CAAC;EAC9D,IAAI,CAACR,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}